name: Documentation

on:
  push:
    branches: ["main", "staging"]
    paths:
      - "docs/**"
      - "README.md"
      - ".github/workflows/docs.yml"
  pull_request:
    branches: ["main", "staging"]
    paths:
      - "docs/**"
      - "README.md"
      - ".github/workflows/docs.yml"
  workflow_dispatch:

jobs:
  build-docs:
    name: üìö Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build MkDocs documentation
        run: |
          mkdocs build

      - name: Check for documentation errors
        run: |
          mkdocs build --strict

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/site/
          retention-days: 30

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          mkdocs gh-deploy --force

  lint-docs:
    name: üîç Lint Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint Markdown files
        run: |
          find docs -name "*.md" -exec markdownlint {} \; 2>/dev/null || echo "markdownlint not available, skipping markdown linting"

      - name: Check for broken links
        run: |
          mkdocs build --strict

      - name: Validate documentation structure
        run: |
          python -c "
          import os
          import yaml
          
          # Check if mkdocs.yml exists
          if not os.path.exists('mkdocs.yml'):
              print('‚ùå Error: mkdocs.yml not found')
              exit(1)
          
          # Check if index.md exists
          if not os.path.exists('index.md'):
              print('‚ùå Error: index.md not found')
              exit(1)
          
          # Validate mkdocs.yml structure
          try:
              with open('mkdocs.yml', 'r') as f:
                  config = yaml.safe_load(f)
              
              if 'nav' not in config:
                  print('‚ùå Error: No nav section found in mkdocs.yml')
                  exit(1)
                  
              print('‚úÖ Documentation structure is valid')
          except Exception as e:
              print(f'‚ùå Error validating mkdocs.yml: {e}')
              exit(1)
          "