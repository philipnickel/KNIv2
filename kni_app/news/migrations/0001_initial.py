# Generated by Django 4.2.24 on 2025-09-19 08:34

from django.db import migrations, models
import django.db.models.deletion
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('images', '0001_initial'),
        ('wagtailcore', '0089_log_entry_data_json_null_to_object'),
    ]

    operations = [
        migrations.CreateModel(
            name='ArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('social_text', models.CharField(blank=True, max_length=255)),
                ('listing_title', models.CharField(blank=True, help_text='Override the page title used when this page appears in listings', max_length=255)),
                ('listing_summary', models.CharField(blank=True, help_text="The text summary used when this page appears in listings. It's also used as the description for search engines if the 'Meta description' field above is not defined.", max_length=255)),
                ('appear_in_search_results', models.BooleanField(default=True, help_text='Make this page available for indexing by search engines.If unchecked, the page will no longer be indexed by search engines.')),
                ('publication_date', models.DateTimeField(blank=True, help_text='Use this field to override the date that the news item appears to have been published.', null=True)),
                ('introduction', models.TextField(blank=True)),
                ('image', wagtail.fields.StreamField([('image', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('image_alt_text', wagtail.blocks.CharBlock(help_text="If left blank, the image's global alt text will be used.", required=False)), ('caption', wagtail.blocks.CharBlock(required=False))]))], blank=True, use_json_field=True)),
                ('body', wagtail.fields.StreamField([('preline_hero_image_reviews', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(help_text='Main hero heading', max_length=255)), ('subheading', wagtail.blocks.TextBlock(help_text='Subheading text', required=False)), ('description', wagtail.blocks.TextBlock(help_text='Description text', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Hero background image', required=False)), ('buttons', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Button text', max_length=255)), ('url', wagtail.blocks.URLBlock(help_text='Button URL')), ('style', wagtail.blocks.ChoiceBlock(choices=[('primary', 'Primary'), ('secondary', 'Secondary'), ('outline', 'Outline')], help_text='Button style'))]), help_text='Call-to-action buttons', max_num=2, min_num=1)), ('reviews', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('rating', wagtail.blocks.IntegerBlock(default=5, help_text='Star rating (1-5)', max_value=5, min_value=1)), ('text', wagtail.blocks.CharBlock(help_text='Review text', max_length=255)), ('author', wagtail.blocks.CharBlock(help_text='Review author name', max_length=255))]), help_text='Customer reviews', max_num=2, min_num=1))], group='Hero Sections')), ('preline_hero_center_video', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(help_text='Main hero heading', max_length=255)), ('subheading', wagtail.blocks.TextBlock(help_text='Subheading text', required=False)), ('description', wagtail.blocks.TextBlock(help_text='Description text', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(help_text='Background image for video section', required=False)), ('video_url', wagtail.blocks.URLBlock(help_text='Video URL (YouTube, Vimeo, etc.)', required=False)), ('play_button_text', wagtail.blocks.CharBlock(default='Play the overview', help_text='Text for the play button', max_length=255))], group='Hero Sections')), ('preline_hero_simple', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(help_text='Main hero heading', max_length=255)), ('subheading', wagtail.blocks.TextBlock(help_text='Subheading text', required=False)), ('description', wagtail.blocks.TextBlock(help_text='Description text', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(help_text='Optional background image', required=False)), ('buttons', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Button text', max_length=255)), ('url', wagtail.blocks.URLBlock(help_text='Button URL')), ('style', wagtail.blocks.ChoiceBlock(choices=[('primary', 'Primary'), ('secondary', 'Secondary'), ('outline', 'Outline')], help_text='Button style'))]), help_text='Call-to-action buttons', max_num=3, min_num=1))], group='Hero Sections')), ('section', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(form_classname='title', icon='title', template='components/streamfield/blocks/heading2_block.html')), ('content', wagtail.blocks.StreamBlock([('paragraph', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'ol', 'ul', 'h3'], template='components/streamfield/blocks/paragraph_block.html'))]))], group='Content')), ('cta', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(form_classname='title', icon='title', required=True)), ('link', wagtail.blocks.StreamBlock([('internal', wagtail.blocks.StructBlock([('page', wagtail.blocks.PageChooserBlock()), ('title', wagtail.blocks.CharBlock(help_text="Leave blank to use page's listing title.", required=False))])), ('external', wagtail.blocks.StructBlock([('link', wagtail.blocks.URLBlock()), ('title', wagtail.blocks.CharBlock())]))])), ('description', wagtail.blocks.TextBlock(required=False))], group='Content')), ('statistics', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(form_classname='title', icon='title', required=True)), ('sr_only_label', wagtail.blocks.BooleanBlock(help_text='If checked, the heading will be hidden from view and avaliable to screen-readers only.', label='Screen reader only label', required=False)), ('statistics', wagtail.blocks.ListBlock(wagtail.snippets.blocks.SnippetChooserBlock('utils.Statistic'), max_num=3, min_num=3))], group='Content')), ('preline_accordion', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(help_text='Optional heading for the accordion section', max_length=255, required=False)), ('items', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Accordion item title', max_length=255)), ('content', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'ol', 'ul']))]), help_text='Add accordion items', min_num=1))], group='PrelineUI Components')), ('preline_alert', wagtail.blocks.StructBlock([('alert_type', wagtail.blocks.ChoiceBlock(choices=[('info', 'Info'), ('success', 'Success'), ('warning', 'Warning'), ('error', 'Error')], help_text='Choose the alert type')), ('title', wagtail.blocks.CharBlock(help_text='Optional alert title', max_length=255, required=False)), ('content', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link'], help_text='Alert message content'))], group='PrelineUI Components')), ('preline_card', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(max_length=255)), ('description', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link'], required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('link', wagtail.blocks.StreamBlock([('internal', wagtail.blocks.StructBlock([('page', wagtail.blocks.PageChooserBlock()), ('title', wagtail.blocks.CharBlock(help_text="Leave blank to use page's listing title.", required=False))])), ('external', wagtail.blocks.StructBlock([('link', wagtail.blocks.URLBlock()), ('title', wagtail.blocks.CharBlock())]))], min_num=0, required=False)), ('card_style', wagtail.blocks.ChoiceBlock(choices=[('default', 'Default'), ('bordered', 'Bordered'), ('shadow', 'Shadow')]))], group='PrelineUI Components')), ('preline_features', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(help_text='Main heading for the features section', max_length=255)), ('description', wagtail.blocks.TextBlock(help_text='Description text below the heading', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Optional hero image for the features section', required=False)), ('features', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Feature title', max_length=255)), ('description', wagtail.blocks.TextBlock(help_text='Feature description')), ('icon_svg', wagtail.blocks.TextBlock(help_text='SVG icon code (optional)', required=False))]), help_text='Add feature items', min_num=1))], group='PrelineUI Components'))], use_json_field=True)),
                ('featured_section_title', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='NewsListingPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('social_text', models.CharField(blank=True, max_length=255)),
                ('listing_title', models.CharField(blank=True, help_text='Override the page title used when this page appears in listings', max_length=255)),
                ('listing_summary', models.CharField(blank=True, help_text="The text summary used when this page appears in listings. It's also used as the description for search engines if the 'Meta description' field above is not defined.", max_length=255)),
                ('appear_in_search_results', models.BooleanField(default=True, help_text='Make this page available for indexing by search engines.If unchecked, the page will no longer be indexed by search engines.')),
                ('introduction', wagtail.fields.RichTextField(blank=True)),
                ('listing_image', models.ForeignKey(blank=True, help_text='Choose the image you wish to be displayed when this page appears in listings', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('social_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
    ]
